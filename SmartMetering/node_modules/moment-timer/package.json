{
  "_from": "moment-timer",
  "_id": "moment-timer@1.2.1",
  "_inBundle": false,
  "_integrity": "sha1-maYMC7HkVy4v+sO8lFz4NqExaN8=",
  "_location": "/moment-timer",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "moment-timer",
    "fetchSpec": "latest",
    "name": "moment-timer",
    "raw": "moment-timer",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/moment-timer/-/moment-timer-1.2.1.tgz",
  "_shasum": "99a60c0bb1e4572e2ffac3bc945cf836a13168df",
  "_spec": "moment-timer",
  "_where": "/Users/rysavy/Projects/Ironstone.LwM2M/SmartMetering",
  "authors": [
    "SÃ¸ren Ernst <some12thing@gmail.com>"
  ],
  "bugs": {
    "url": "https://github.com/SeverinDK/moment-timer/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "moment": "latest"
  },
  "deprecated": false,
  "description": "A moment.js plugin for timers setInterval & setTimeout.",
  "devDependencies": {},
  "homepage": "https://github.com/SeverinDK/moment-timer#readme",
  "keywords": [
    "interval",
    "moment",
    "setInterval",
    "setTimeout",
    "timeout",
    "timer"
  ],
  "license": "MIT",
  "main": "lib/moment-timer.js",
  "name": "moment-timer",
  "optionalDependencies": {},
  "readme": "# moment-timer\n\n### Synopsis\nThis is a Moment.js plugin that allows the use of timers, which offer much more control than the native JavaScript timers. It's basically a rewrite of JavaScripts own setInterval and setTimeout. For an example, see the example folder or read the Usage section below.\n\n<hr>\n\n### Installation\n\n#### Npm\n```\nnpm install moment-timer\n```\n\n#### Bower\n```\nbower install moment-timer\n```\n\n#### Browser\n```\n<script src=\"path/to/moment-timer.js\"></script>\n```\nWhen using this plugin in the browser, be sure to include moment.js on your page first.\n\n<hr>\n\n### Usage\n\n#### How to use moment-timer. This will create a timeout like timer that runs after five seconds.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer(function() { \n  // Callback \n});\n```\n\n#### In this example we will create an interval like timer. Simply set the <b>loop</b> attribute.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  loop: true\n}, function() { \n  // Callback \n});\n```\n\n#### Prevent the timer from starting on creation, by using the <b>start</b> attribute, so we can start it later.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  loop: true, \n  start: false\n}, function() { \n  // Callback \n});\ntimer.start();\n```\n\n#### Stopping a timer can be done by using the stop() function. After the timer has been stopped, the start function can be used to start it again.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  loop: true, \n  start: true\n}, function() { \n  // Callback \n});\ntimer.stop();\ntimer.start();\n```\n\n#### See if a timer has been stopped.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  loop: true, \n  start: true\n}, function() { \n  // Callback \n});\ntimer.stop();\ntimer.isStopped(); // True\n\ntimer.start();\ntimer.isStopped(); // False\n```\n\n#### Delaying a timer can be done by using the <b>wait</b> attribute. In the example below, the timer will wait for an hour and five seconds before it executes.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  wait: moment.duration(1, \"hour\"),\n  loop: true,\n}, function() { \n  // Callback \n});\n```\n\n#### Having the timer execute after waiting, can be done by using the <b>executeAfterWait</b> attribute. In the example below, the timer will wait for an hour, then execute and do so again after another five seconds.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  wait: moment.duration(1, \"hour\"),\n  executeAfterWait: true,\n  loop: true,\n}, function() { \n  // Callback \n});\n```\n\n#### Setting the duration of a timer. This will override the duration set when the timer was created.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  loop: true, \n}, function() { \n  // Callback \n});\n\ntimer.duration(2000);\ntimer.duration(\"2\", \"seconds\");\ntimer.duration({seconds: 2});\n```\n\n#### Getting the duration of a timer.\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  loop: true, \n}, function() { \n  // Callback \n});\n\nvar duration = timer.getDuration();\n```\n\n#### Getting the remaining duration of a timer. (How long until it ends or loops again)\n```javascript\nvar timer = moment.duration(5, \"seconds\").timer({\n  loop: true, \n}, function() { \n  // Callback \n});\n\nvar remainingDuration = timer.getRemainingDuration();\n```\n\n#### In this example we an see that a \"timeout like timer\" can be reused. If you run this example, you will notice it executing the callback twice. This is to show that even if you use the timer like a timeout, it can be reused, unlike JavaScripts native setTimeout that will only function once.\n```javascript\nvar timer = moment.duration().timer({\n}, function() { \n  // Callback \n});\n\ntimer.start();\n```\n\n<hr>\n\n### Motivation\nMy motivation for making this script is to prevent any annoyance in the future when working with JavaScript timers. With these tools, I know that I will prevent a lot of the problems I have had through time.\nBut ofc, the biggest motivation is simply making the idea come alive and enjoying the result. Every completed idea is a new lesson learned!\n\n<hr>\n\n### License\nMIT - Go ahead and do whatever you want! I doooon't caaare! ;-)\n\n<hr>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SeverinDK/moment-timer.git"
  },
  "version": "1.2.1"
}
